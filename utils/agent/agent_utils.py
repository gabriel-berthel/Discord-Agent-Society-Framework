import re
from types import SimpleNamespace
import asyncio
import logging

logger = logging.getLogger(__name__)

async def _wait_time_out(tasks, timeout=30, timeout_message="Operation timed out.", default_return=""):
    try:
        return await asyncio.wait_for(tasks, timeout=timeout)
    except asyncio.TimeoutError:
        logger.error(f"Agent-Module: [key='WaitTimeOut'] | {timeout_message}")
        return default_return

class DictToAttribute(SimpleNamespace):
    """SimpleNameSpace + get method compability :D"""

    def get(self, key, default=None):
        return getattr(self, key, default)


def clean_module_output(text: str) -> str:
    """
    Cleans and formats the input text to remove unnecessary whitespace and ensure proper punctuation spacing.

    This function performs the following operations:
    1. Replaces all newlines (`\n`) with a space.
    2. Collapses multiple consecutive spaces into a single space.
    3. Ensures that punctuation marks (.,!?;:) are not preceded by spaces.

    Args:
        text (str): The input text that needs to be cleaned.

    Returns:
        str: The cleaned and formatted text.
    """

    text = text.replace('\n', ' ')
    text = re.sub(r'\s+', ' ', text)
    text = re.sub(r'\s+([.,!?;:])', r'\1', text)
    return text.strip()


def split_queries(txt):
    """
    Splits raw model output into individual, cleaned queries.

    Args:
        txt (str): Raw response text containing multiple queries.

    Returns:
        list: A list of parsed and cleaned queries.
    """


    queries = re.findall(r'Query:\s*(.+?)(?=\nQuery:|\Z)', txt, flags=re.DOTALL)
    return [
        re.sub(r'\s+', ' ', re.sub(r'[^\w\s?]', '', q.strip()))
        for q in queries if q.strip()
    ]


def clean_response(response):
    """
    Cleans and formats the raw response by removing unnecessary characters or formatting.
    This is necessary as agents to output messages with prefixes such as "Cassidy:" or noise such as hastags.

    Args:
        response (str): The raw response generated by the model.

    Returns:
        str: The cleaned, formatted response ready for be sent.
    """

    response = re.sub(r'\s+', ' ', response).strip()

    if response.startswith("**"):
        cleaned_text = re.sub(r"^\*\*.*?\*\*", "", response)
    elif response.startswith("*"):
        cleaned_text = re.sub(r"^\*.*?\*", "", response)
    elif response.startswith("["):
        cleaned_text = re.sub(r"^\[.*?\]:?\s", "", response)
    elif response.startswith("("):
        cleaned_text = re.sub(r"^\((.*?)\):?\s", "", response)
    elif ":" in response[:25]:
        cleaned_text = re.sub(r"^[^:]+:", "", response)
    else:
        cleaned_text = response

    cleaned_text = re.sub(r'(?:#\w+|:\w+:)', '', cleaned_text)
    #  cleaned_text = re.sub(r'[^\w\s,.\-!?]', '', cleaned_text) # remove emojis
    cleaned_text = cleaned_text.strip().replace('\n', ' ').strip().removeprefix('"').removesuffix('"').removeprefix(
        '"').removesuffix('"').removeprefix("[").removesuffix("]").removeprefix(':')

    return cleaned_text.strip()
